name: CI‑CD–Test, Build & Deploy to Azure

on:
  push:
    branches: [main]

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      api: ${{ steps.filter.outputs.api }}
      web: ${{ steps.filter.outputs.web }}
    steps:
      - uses: actions/checkout@v3
      - id: filter
        uses: dorny/paths-filter@v3
        with:
          filters: |
            api:
              - 'project/src/api/**'
            web:
              - 'project/src/frontend/**'

  test:
    runs-on: ubuntu-latest
    needs: detect-changes
    steps:
      - uses: actions/checkout@v3
      - name: Install docker-compose
        run: |
          curl -SL https://github.com/docker/compose/releases/download/v2.24.2/docker-compose-$(uname -s)-$(uname -m) -o /usr/local/bin/docker-compose
          chmod +x /usr/local/bin/docker-compose
          docker-compose version
      - name: Run tests
        run: |
          WANDB_API_KEY="${{ secrets.WANDB_API_KEY }}" \
          WANDB_ARTIFACT_PATH="${{ vars.WANDB_ARTIFACT_PATH }}" \
          WANDB_ENTITY="${{ vars.WANDB_ENTITY }}" \
          docker-compose -f ./project/src/docker-compose.yml up --abort-on-container-exit test

  build-api:
    runs-on: ubuntu-latest
    needs: [test, detect-changes]
    if: ${{ needs.detect-changes.outputs.api == 'true' }}
    steps:
      - uses: actions/checkout@v3
      - uses: azure/login@v1
        with:
            creds: ${{ secrets.AZURE_CREDENTIALS }}
      - name: Docker login
        run: az acr login --name ${{ vars.AZURE_ACR_NAME }}
      - name: Build & push API image
        run: |
          docker build -t ${{ vars.AZURE_ACR_NAME }}.azurecr.io/fraud-classification-mlops:latest ./project/src/api
          docker push ${{ vars.AZURE_ACR_NAME }}.azurecr.io/fraud-classification-mlops:latest

  build-web:
    runs-on: ubuntu-latest
    needs: [test, detect-changes]
    if: ${{ needs.detect-changes.outputs.web == 'true' }}
    steps:
      - uses: actions/checkout@v3
      - uses: azure/login@v1
        with:
            creds: ${{ secrets.AZURE_CREDENTIALS }}
      - name: Docker login
        run: az acr login --name ${{ vars.AZURE_ACR_NAME }} --username ${{ secrets.ACR_USERNAME }} --password ${{ secrets.ACR_PASSWORD }}
      - name: Build & push Web image
        run: |
          docker build -t ${{ vars.AZURE_ACR_NAME }}.azurecr.io/web-fraud-classification-mlops:latest ./project/src/frontend
          docker push ${{ vars.AZURE_ACR_NAME }}.azurecr.io/web-fraud-classification-mlops:latest

  deploy:
    runs-on: ubuntu-latest
    needs: [build-api, build-web]
    steps:
      - uses: actions/checkout@v3
      - uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      # Paso 1: Convertir compose a base64
      - name: Encode Docker Compose
        id: encode
        working-directory: project/src
        run: |
          COMPOSE_BASE64=$(base64 -w0 docker-compose.prod.yml)
          echo "COMPOSE_BASE64=$COMPOSE_BASE64" >> $GITHUB_ENV

      # Paso 2: Configurar Web App
      - name: Configure App Service
        run: |
          az webapp config set \
            --name ${{ vars.AZURE_WEBAPP_NAME }} \
            --resource-group upm-mlops \
            --linux-fx-version "COMPOSE|${{ env.COMPOSE_BASE64 }}"

          az webapp config container set \
            --name ${{ vars.AZURE_WEBAPP_NAME }} \
            --resource-group upm-mlops \
            --docker-registry-server-url https://${{ vars.AZURE_ACR_NAME }}.azurecr.io \
            --docker-registry-server-user ${{ secrets.ACR_USERNAME }} \
            --docker-registry-server-password ${{ secrets.ACR_PASSWORD }}

      # Paso 3: Reiniciar
      - name: Restart App
        run: |
          az webapp restart --name ${{ vars.AZURE_WEBAPP_NAME }} --resource-group upm-mlops